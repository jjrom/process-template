#!/usr/bin/env python3
# Copyright 2023 Jerome Gasperi

import argparse
import textwrap
import sys
import os
import json
import rapid.process as p

DESCRIPTION = """replace a process to resto endpoint

    Commands: replace application_package [options]

            Where application_package is an OGC Application Package file
            
            Optional arguments:
                --endpoint                      resto OGC API Processes endpoint (superseed PROCESS_API_ENDPOINT environnement variable)
                --auth                          Authentication token to POST to resto OGC API Processes endpoint (superseed PROCESS_API_AUTH_TOKEN environnement variable)

            Environment variables:

                PROCESS_API_ENDPOINT              
                PROCESS_API_AUTH_TOKEN    
                
            Exit code:
                0                   Success
                1                   Error unknown (grave)
                2                   Error - no features after optimization
"""

def args_options():

    # Parser
    parser = argparse.ArgumentParser(prog='deploy', formatter_class=argparse.RawDescriptionHelpFormatter, description=textwrap.dedent(DESCRIPTION))
    parser.add_argument('target', help="application_package file")
    parser.add_argument('--endpoint', help='resto OGC API Processes endpoint (superseed PROCESS_API_ENDPOINT environnement variable)')
    parser.add_argument('--auth', help='Authentication token to POST to resto OGC API Processes endpoint')
    return parser


def main(args):
    """
    Main function - replace process to PROCESS_API_ENDPOINT using PROCESS_API_AUTH_TOKEN authentication token
    """
    config = {}
        
    configKeys = [
        'PROCESS_API_ENDPOINT',
        'PROCESS_API_AUTH_TOKEN'
    ]
    for key in configKeys:
        if os.environ.get(key):
            config[key] = os.environ.get(key)
    
    if not args:
        print('[ERROR] Missing mandatory target')
        return 1

    if 'endpoint' in args and args.endpoint:
        config['PROCESS_API_ENDPOINT'] = args.endpoint
    
    if 'auth' in args and args.auth:
        config['PROCESS_API_AUTH_TOKEN'] = args.endpoint

    # Load Application Package
    f = open(args.target)
    applicationPackage = json.load(f)
    f.close()

    # Deploy to resto
    processApi = p.ProcessAPI(config)
    r = processApi.replace(applicationPackage['processDescription']['id'], applicationPackage)
    print(r.text)
    
    goodbye(0)
    
def goodbye(code):
    sys.exit(code)

#####################################
def __main__():
    parser = args_options()
    args = parser.parse_args()
    code = main(args)
    goodbye(code)

if __name__ == "__main__":
    try:
        __main__()
    except (KeyboardInterrupt):
        goodbye(1)
